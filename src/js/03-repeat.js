// Підрахунок суми елементів масиву: Напишіть функцію, яка приймає масив чисел і повертає проміс, який вирішується сумою всіх елементів масиву. Можна використати метод масиву reduce() для підрахунку суми.
// const arr = [1, 2, 3, 4, 10];

// function summOfArr(arr) {
// return new Promise((resolve, reject) => {
//     if (arr && arr.length > 0) {
//        const sum = arr.reduce((acc, item) => acc + item, 0);
//         resolve(sum);
//     } else {
//         reject('Error')
//     }
// })
// }
 
// summOfArr(arr)
//     .then((sum) => {
//     console.log(`final sum is ${sum}`);
// }).catch(() => {
//     console.log('sorry');
// })




// Пошук максимального елемента в масиві: Напишіть функцію, яка приймає масив чисел та повертає проміс, який вирішується максимальним числом у масиві.

const arr = [1, 5, 3, 4];
let maxItem;

function createPromise(arr) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (arr || arr.length > 0) {
                for (let i = 0; i < arr.length; i += 1){
                    maxItem = Math.max(arr[i]);
console.log(maxItem);
                }
            } else (reject(console.log(err)))
        }, 500)
    })
}

createPromise(arr).then(() => {
    console.log(item);
}).catch((err) => {
    console.log('this is ERROR');
})























// Фільтрація масиву: Напишіть функцію, яка приймає масив чисел та значення, і повертає проміс, який вирішується новим масивом, який містить лише числа з початкового масиву, більші за задане значення.

// Обчислення середнього арифметичного: Напишіть функцію, яка приймає масив чисел та повертає проміс, який вирішується середнім арифметичним чисел у масиві.

// Пошук унікальних елементів: Напишіть функцію, яка приймає масив чисел та повертає проміс, який вирішується новим масивом, який містить лише унікальні елементи з початкового масиву (без повторень).

// Знаходження суми додатних чисел: Напишіть функцію, яка приймає масив чисел та повертає проміс, який вирішується сумою всіх додатних чисел у масиві.

// Автентифікація користувача за допомогою форми: Напишіть функцію, яка приймає дані з форми автентифікації(наприклад, ім'я користувача та пароль) і повертає проміс, який вирішується, якщо користувач успішно автентифікований, або відхиляється, якщо автентифікація не вдалася.

// Збереження даних локально: Напишіть функцію, яка приймає дані та зберігає їх локально на пристрої користувача (наприклад, використовуючи localStorage). Поверніть проміс, який вирішується, коли дані успішно збережено.